apply plugin: 'com.android.library'
apply plugin: "jacoco"
apply plugin: "com.jfrog.bintray"

ext {
    srcFolders = file("./").listFiles().findAll {
        !it.isFile() && !it.name.startsWith("gradle") && !it.name.startsWith("test")
    }.collect { "./" + it.name + "/src/main/java" }
}

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"


    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 29
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro'
    }

    flavorDimensions "messaging"
    productFlavors{
        phone {}
    }

    buildTypes {
        debug {
            testCoverageEnabled true
            debuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibility
        targetCompatibility rootProject.ext.targetCompatibility
    }
}

task platformUnitTestJacocoReport(type: JacocoReport, dependsOn: "testPhoneDebugUnitTest") {
    sourceDirectories = files(android.sourceSets.main.java.sourceFiles)
    sourceDirectories += files(android.sourceSets.phone.java.sourceFiles)
    executionData "$buildDir/jacoco/testPhoneDebugUnitTest.exec"
    classDirectories = fileTree(dir: "$buildDir/intermediates/classes/phone/debug/com/adobe/marketing/mobile")
}

tasks.withType(Test) {
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        includeNoLocationClasses = false
        includes = ['*/phone/java/com/adobe/marketing/mobile/*.java']
    }
}

android.libraryVariants.all { variant ->
    tasks.withType(Javadoc) {
        source = [android.sourceSets.main.java.sourceFiles, android.sourceSets.phone.java.sourceFiles]
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"

        doFirst{classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)}


        exclude "**/BuildConfig.java"
        exclude "**/R.java"
    }

}

task javadocInternal(type: Javadoc) {
    destinationDir = reporting.file("javadocInternal")
    options.memberLevel = JavadocMemberLevel.PRIVATE
}

task javadocPublic(type: Javadoc) {
    destinationDir = reporting.file("javadocPublic")
    options.memberLevel = JavadocMemberLevel.PUBLIC
}

task javadocPublish(type: Jar) {
    from javadocPublic
    classifier = 'javadoc'
}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation "com.adobe.marketing.mobile:core:${rootProject.mavenCoreVersion}"
    testImplementation 'junit:junit:4.13'
    testImplementation "org.mockito:mockito-core:2.28.2"
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    testImplementation 'org.json:json:20180130'
    testImplementation fileTree(dir: 'libs', include: ['*.aar'])
}

afterEvaluate {
    generatePhoneReleaseBuildConfig.enabled = false
}
